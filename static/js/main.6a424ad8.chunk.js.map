{"version":3,"sources":["components/Searchbar/Searchbar.jsx","images/default.jpg","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","services/images-api.jsx","components/Button/Button.jsx","components/Loader/Loader.jsx","components/Modal/Modal.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["Searchbar","state","searchQuery","handleSearchChange","event","setState","currentTarget","value","toLowerCase","handleSubmit","preventDefault","trim","props","onSubmit","resetPage","className","this","type","onChange","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","openModal","webformatURL","defaultImage","largeImageURL","tags","onClick","evt","target","dataset","source","alt","src","ImageGallery","images","map","id","fetchImages","page","a","searchParams","URLSearchParams","image_type","orientation","q","per_page","key","url","fetch","response","json","fetchObject","hits","imagesArray","length","Promise","reject","Error","Button","Loading","color","height","width","timeout","modalRoot","document","querySelector","Modal","handleKeyDown","code","closeModal","handleBackdropClick","window","addEventListener","removeEventListener","createPortal","modalImage","modalImageAlt","Notification","message","App","isLoading","showModal","error","getSearchQuerry","pageIncrement","prevState","toggleIsLoading","toggleModal","scrollTo","top","documentElement","scrollHeight","behavior","prevProps","prevSearchQuerry","nextSearchQuerry","prevPage","nextpage","prevImages","prevmodalImage","nextmodalImage","prevShowModal","nextshowModal","setTimeout","imageAPI","then","catch","finally","scroll","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a424ad8.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../Searchbar/Searchbar.scss';\n\nclass Searchbar extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    resetPage: PropTypes.func.isRequired,\n    // getError: PropTypes.func.isRequired,\n  };\n  state = {\n    searchQuery: '',\n  };\n\n  handleSearchChange = (event) => {\n    this.setState({\n      searchQuery: event.currentTarget.value.toLowerCase(),\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.searchQuery.trim() === '') {\n      this.props.onSubmit(this.state.searchQuery.trim());\n      return;\n    }\n\n    this.props.onSubmit(this.state.searchQuery);\n    this.setState({ searchQuery: '' });\n    this.props.resetPage();\n  };\n\n  render() {\n    return (\n      <header className=\"searchbar\">\n        <form className=\"searchform\" onSubmit={this.handleSubmit}>\n          <button type=\"submit\" className=\"searchform__button\">\n            <span className=\"searchform__button--label\">Search</span>\n          </button>\n\n          <input\n            className=\"searchform__input\"\n            type=\"text\"\n            value={this.state.searchQuery}\n            onChange={this.handleSearchChange}\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Searchbar;\n","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../ImageGalleryItem/ImageGalleryItem.scss';\nimport defaultImage from '../../images/default.jpg';\n\nconst ImageGalleryItem = ({\n  openModal,\n  webformatURL = defaultImage,\n  largeImageURL,\n  tags,\n}) => {\n  return (\n    <>\n      <li className=\"gallery__item\">\n        <img\n          onClick={(evt) =>\n            openModal(evt.target.dataset.source, evt.target.alt)\n          }\n          src={webformatURL}\n          alt={tags}\n          data-source={largeImageURL}\n          className=\"gallery__image\"\n        />\n      </li>\n    </>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  openModal: PropTypes.func.isRequired,\n  webformatURL: PropTypes.string.isRequired,\n  largeImageURL: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport '../ImageGallery/ImageGallery.scss';\n\nconst ImageGallery = ({ images, openModal }) => {\n  return (\n    <ul className=\"gallery\">\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\n        <ImageGalleryItem\n          key={id}\n          openModal={openModal}\n          webformatURL={webformatURL}\n          largeImageURL={largeImageURL}\n          tags={tags}\n        />\n      ))}\n    </ul>\n  );\n};\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape).isRequired,\n  openModal: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","const BASE_URL = 'https://pixabay.com/api';\nconst API_KEY = '22356210-f5a6fb995cd777b2b01184cc9';\n\nconst fetchImages = async (searchQuery, page) => {\n  const searchParams = new URLSearchParams({\n    image_type: 'photo',\n    orientation: 'horizontal',\n    q: searchQuery,\n    page,\n    per_page: 12,\n    key: `${API_KEY}`,\n  });\n  const url = `${BASE_URL}/?${searchParams}`;\n\n  const response = await fetch(url);\n  const fetchObject = await response.json();\n  const imagesArray = await fetchObject.hits;\n\n  if (imagesArray.length !== 0) {\n    return imagesArray;\n  }\n\n  return Promise.reject(new Error(`No pictures with name \"${searchQuery}\"`));\n};\n\nexport default fetchImages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../Button/Button.scss';\n\nconst Button = ({ page }) => {\n  return (\n    <>\n      <button type=\"button\" className=\"button\" onClick={page}>\n        Load more\n      </button>\n    </>\n  );\n};\n\nButton.propTypes = {\n  page: PropTypes.func,\n};\n\nexport default Button;\n","import React from 'react';\nimport '../Loader/Loader.scss';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nconst Loading = () => {\n  return (\n    <Loader\n      className=\"loader\"\n      type=\"Circles\"\n      color=\"#303f9f\"\n      height={100}\n      width={100}\n      timeout={500}\n    />\n  );\n};\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  static propTypes = {\n    closeModal: PropTypes.func.isRequired,\n    modalImage: PropTypes.string.isRequired,\n    modalImageAlt: PropTypes.string.isRequired,\n  };\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = (evt) => {\n    if (evt.code === 'Escape') {\n      this.props.closeModal();\n    }\n  };\n\n  handleBackdropClick = (event) => {\n    if (event.currentTarget === event.target) {\n      this.props.closeModal();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"overlay\" onClick={this.handleBackdropClick}>\n        <div className=\"modal\">\n          <img\n            className=\"modal__image\"\n            src={this.props.modalImage}\n            alt={this.props.modalImageAlt}\n          />\n        </div>\n      </div>,\n      modalRoot\n    );\n  }\n}\n","import React from 'react';\nimport '../Notification/Notification.scss';\n\nconst Notification = ({ message }) => (\n  <h1 className=\"notification__error\">{message}</h1>\n);\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\n// import Clock from './components/Clock';\nimport imageAPI from './services/images-api';\nimport Button from './components/Button';\nimport Loading from './components/Loader';\nimport Modal from './components/Modal';\nimport Notification from './components/Notification';\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    searchQuery: null,\n    page: 1,\n    images: [],\n    isLoading: false,\n    showModal: false,\n    modalImage: '',\n    modalImageAlt: '',\n    error: null,\n  };\n\n  scroll() {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevSearchQuerry = prevState.searchQuery;\n    const nextSearchQuerry = this.state.searchQuery;\n    const prevPage = prevState.page;\n    const nextpage = this.state.page;\n    const prevImages = prevState.images;\n    const prevmodalImage = prevState.modalImage;\n    const nextmodalImage = this.state.modalImage;\n    const prevShowModal = prevState.showModal;\n    const nextshowModal = this.state.showModal;\n\n    if (prevmodalImage !== nextmodalImage) {\n      return;\n    }\n\n    if (prevSearchQuerry !== nextSearchQuerry) {\n      this.toggleIsLoading();\n      this.setState({ images: [], error: null });\n\n      if (nextSearchQuerry === '') {\n        setTimeout(() => {\n          this.setState({\n            error: { message: 'Ops, empty. Please enter something...' },\n          });\n          this.toggleIsLoading();\n        }, 500);\n        return;\n      }\n\n      imageAPI(nextSearchQuerry, nextpage)\n        .then((images) => this.setState({ images }))\n        .catch((error) => this.setState({ error }))\n        .finally(this.toggleIsLoading);\n    }\n\n    if (nextpage === 1) {\n      return;\n    }\n\n    if (prevPage !== nextpage) {\n      this.toggleIsLoading();\n\n      imageAPI(prevSearchQuerry, nextpage)\n        .then((images) => {\n          this.setState({ images: [...prevImages, ...images] });\n        })\n        .finally(this.toggleIsLoading);\n    }\n\n    if (!prevShowModal && !nextshowModal) {\n      this.scroll();\n    }\n  }\n\n  getSearchQuerry = (searchQuery) => this.setState({ searchQuery });\n\n  pageIncrement = () =>\n    this.setState((prevState) => ({ page: prevState.page + 1 }));\n\n  resetPage = () => this.setState({ page: 1 });\n\n  toggleIsLoading = () =>\n    this.setState(({ isLoading }) => ({ isLoading: !isLoading }));\n\n  toggleModal = () =>\n    this.setState(({ showModal }) => ({ showModal: !showModal }));\n\n  openModal = (url, alt) => {\n    this.toggleModal();\n\n    this.setState(({ modalImage }) => ({\n      modalImage: url,\n      modalImageAlt: alt,\n    }));\n  };\n\n  closeModal = () => {\n    this.toggleModal();\n\n    this.setState(({ modalImage }) => ({\n      modalImage: '',\n      modalImageAlt: '',\n    }));\n  };\n\n  render() {\n    const { images, showModal, modalImage, modalImageAlt, error, isLoading } =\n      this.state;\n    return (\n      <main className=\"app\">\n        <Searchbar onSubmit={this.getSearchQuerry} resetPage={this.resetPage} />\n        {error && <Notification message={error.message} />}\n        <ImageGallery images={images} openModal={this.openModal} />\n        {isLoading && <Loading />}\n        {images.length ? <Button page={this.pageIncrement} /> : null}\n        {showModal && (\n          <Modal\n            closeModal={this.closeModal}\n            modalImage={modalImage}\n            modalImageAlt={modalImageAlt}\n          />\n        )}\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}